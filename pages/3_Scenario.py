import streamlit as st
import pandas as pd
import pyodbc
from azure.identity import DefaultAzureCredential
from azure.keyvault.secrets import SecretClient
from streamlit_cookies_manager import EncryptedCookieManager

st.set_page_config(
    page_title="Finance App",
    page_icon="üí∞",
    layout="wide"
)

# -----------------------------
# Cookies & login
# -----------------------------
cookies = EncryptedCookieManager(
    prefix="financeapp",
    password="super_secret_key_123"
)
if not cookies.ready():
    st.stop()

if "logged_in" not in st.session_state:
    st.session_state.logged_in = cookies.get("logged_in") == "True"
    st.session_state.username = cookies.get("username") or ""

if not st.session_state.logged_in:
    st.warning("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ login ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    st.stop()

# -----------------------------
# Azure Key Vault & SQL connection
# -----------------------------
keyVaultName = "financeproject"
KVUri = f"https://{keyVaultName}.vault.azure.net/"
credential = DefaultAzureCredential()
client = SecretClient(vault_url=KVUri, credential=credential)

sql_username = client.get_secret("SQL-Username").value
sql_password = client.get_secret("SQL-Password").value

server = "assetcontrol.database.windows.net"
database = "platform_GP"

def get_connection():
    return pyodbc.connect(
        f"DRIVER={{ODBC Driver 17 for SQL Server}};"
        f"SERVER={server};DATABASE={database};UID={sql_username};PWD={sql_password}"
    )

# -----------------------------
# Load GP from SQL
# -----------------------------
def load_gp():
    conn = get_connection()
    df = pd.read_sql("SELECT * FROM GP", conn)
    conn.close()
    st.session_state["GP1"] = df
    return df

if "GP1" not in st.session_state:
    gp_df = load_gp()
else:
    gp_df = st.session_state["GP1"]

# Normalize column names
gp_df["Third_party"] = gp_df["Third_party"].str.strip()
gp_df["ITem_fees"] = gp_df["ITem_fees"].str.strip()
gp_df["GP"] = gp_df["GP"].astype(float)

# -----------------------------
# Create fees dictionary
# -----------------------------
fees = {}
for _, row in gp_df.iterrows():
    shop = row["Third_party"]
    fee_type = row["ITem_fees"]
    rate = float(row["GP"])
    if shop not in fees:
        fees[shop] = {}
    fees[shop][fee_type] = rate

# Unique fee types and shops
fee_types = gp_df["ITem_fees"].unique().tolist()
shops = gp_df["Third_party"].unique().tolist()

# -----------------------------
# Input price
# -----------------------------
price = st.number_input("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏£‡∏ß‡∏° Vat7%)", min_value=0, value=490, step=1)

# -----------------------------
# Initialize editable DataFrame
# -----------------------------
rows = [
    "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢ (‡∏£‡∏ß‡∏° Vat7%)",
    "‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏à‡∏≤‡∏Å‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤",
    "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏´‡∏±‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î",
    "‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î",
    "‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠",
    "‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á (‡∏Ç‡∏ô‡∏™‡πà‡∏á)",
    "‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠"
] + list(fee_types)  # append fee types dynamically

df = pd.DataFrame(index=rows, columns=shops, dtype=float)

for shop in shops:
    df[shop] = [float(price), 0.0, float(price), 0.0, 0.0, 0.0, 0.0] + [0.0]*len(fee_types)

# -----------------------------
# Update function
# -----------------------------
def update_all(df, fees):
    for shop in df.columns:
        shop_norm = shop.strip()
        price_val = float(df.loc["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢ (‡∏£‡∏ß‡∏° Vat7%)", shop])
        discount_val = float(df.loc["‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏à‡∏≤‡∏Å‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤", shop])
        code_discount = float(df.loc["‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î", shop])
        buyer_ship = float(df.loc["‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠", shop])
        actual_ship = float(df.loc["‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á (‡∏Ç‡∏ô‡∏™‡πà‡∏á)", shop])
        
        # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏´‡∏±‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
        net_price = price_val - discount_val
        df.loc["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏´‡∏±‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î", shop] = net_price
        
        # ‡∏¢‡∏≠‡∏î‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠
        buyer_amount = net_price - code_discount - buyer_ship - actual_ship
        df.loc["‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠", shop] = buyer_amount
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Fee ‡∏ó‡∏∏‡∏Å‡∏ä‡∏ô‡∏¥‡∏î
        for fee_type in fee_types:
            fee_type_norm = fee_type.strip()
            rate = fees.get(shop_norm, {}).get(fee_type_norm, 0)
            df.loc[fee_type, shop] = round(buyer_amount * rate, 2)
    return df

# Initial calculation
df = update_all(df, fees)

# -----------------------------
# Streamlit editable table
# -----------------------------
edited_df = st.data_editor(
    df,
    num_rows="dynamic",
    use_container_width=True,
    key="df_editor"
)

# Live update after editing
if edited_df is not None:
    edited_df = update_all(edited_df, fees)
    st.dataframe(edited_df)