import streamlit as st
import pandas as pd
import pyodbc
from azure.identity import DefaultAzureCredential
from azure.keyvault.secrets import SecretClient
import time
from streamlit_option_menu import option_menu
from streamlit_cookies_manager import EncryptedCookieManager
import requests
st.set_page_config(
    page_title="Finance App",
    page_icon="üí∞",
    layout="wide"
)


cookies = EncryptedCookieManager(
    prefix="financeapp",
    password="super_secret_key_123"  # ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÉ‡∏ô app.py
)
if not cookies.ready():
    st.stop()
    
if "logged_in" not in st.session_state:
    st.session_state.logged_in = cookies.get("logged_in") == "True"
    st.session_state.username = cookies.get("username") if cookies.get("username") else ""


if "logged_in" not in st.session_state or not st.session_state.logged_in:
    st.warning("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ login ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    st.stop()  # ‡∏´‡∏¢‡∏∏‡∏î render ‡∏´‡∏ô‡πâ‡∏≤
current_page = "AP ERP"

# -----------------------------
# Azure Key Vault
# -----------------------------
keyVaultName = "financeproject"
KVUri = f"https://{keyVaultName}.vault.azure.net/"

credential = DefaultAzureCredential()
client = SecretClient(vault_url=KVUri, credential=credential)

sql_username = client.get_secret("SQL-Username").value
sql_password = client.get_secret("SQL-Password").value

server = "assetcontrol.database.windows.net"
database = "platform_GP"



# -----------------------------
# Connect DB
# -----------------------------
def get_connection():
    conn = pyodbc.connect(
        f"DRIVER={{ODBC Driver 17 for SQL Server}};"
        f"SERVER={server};DATABASE={database};UID={sql_username};PWD={sql_password}"
    )
    return conn

st.title("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• GP")



# -----------------------------
# Load AP_upload
# -----------------------------
def load_gp():
    conn = get_connection()
    df = pd.read_sql("SELECT * FROM GP", conn)
    conn.close()
    st.session_state["GP"] = df
    return df


# -----------------------------
# Load data if not in session_state
# -----------------------------
if "GP" not in st.session_state:
    gp_df = load_gp()
else:
    gp_df = st.session_state["GP"]
    
    
st.subheader("Data GP (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ)")

# ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ö‡∏ô (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ)
edited_df = st.data_editor(
    gp_df,
    num_rows="dynamic",
    use_container_width=True,
    key="gp_editor"
)

def save_to_sql(df, incremental_col="ID"):
    """Saves the dataframe back to the SQL database by overwriting existing data.
    Supports incremental column by enabling IDENTITY_INSERT."""
    
    conn = get_connection()
    cursor = conn.cursor()
    
    table_name = "GP"
    
    try:
        # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
        cursor.execute(f"DELETE FROM {table_name}")
        
        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° column ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏£‡∏ß‡∏° ID)
        cols = df.columns.tolist()
        cols_str = ", ".join([f"[{col}]" for col in cols])
        placeholders = ", ".join(["?"] * len(cols))
        sql_insert = f"INSERT INTO {table_name} ({cols_str}) VALUES ({placeholders})"
        
        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° rows
        rows_to_insert = [tuple(row[col] for col in cols) for _, row in df.iterrows()]
        
        # ‡πÄ‡∏õ‡∏¥‡∏î IDENTITY_INSERT ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        cursor.execute(f"SET IDENTITY_INSERT {table_name} ON")
        cursor.executemany(sql_insert, rows_to_insert)
        cursor.execute(f"SET IDENTITY_INSERT {table_name} OFF")
        
        conn.commit()
        st.success("‚úÖ Changes saved successfully!")
        st.session_state["data_saved"] = True

    except pyodbc.Error as ex:
        st.error(f"‚ùå Error saving data: {ex}")
        conn.rollback()
    finally:
        conn.close()




# Add a button to trigger the save operation
if st.button("üíæ Save Changes to Database"):
    save_to_sql(edited_df)
# -----------------------------
# Save back to DB
# -----------------------------

# -----------------------------
# ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏á ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß + %
# -----------------------------
st.subheader("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (‡∏û‡∏£‡πâ‡∏≠‡∏° %)")

# ‡πÉ‡∏ä‡πâ edited_df ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà gp_df
gp1 = edited_df.copy()

# ‡πÅ‡∏õ‡∏•‡∏á GP ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô float (‡∏Å‡∏±‡∏ô error ‡πÄ‡∏ß‡∏•‡∏≤ %)
gp1["GP"] = gp1["GP"].astype(float)

# ‡πÄ‡∏û‡∏¥‡πà‡∏° column %
gp1["GP (%)"] = gp1["GP"] * 100
gp1["GP (%)"] = gp1["GP (%)"].apply(lambda x: f"{x:.2f}%")

# ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å column ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á
gp1 = gp1[["Third_party", "ITem_fees", "GP", "GP (%)"]]

st.dataframe(gp1, use_container_width=True)